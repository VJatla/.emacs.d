#+Title: Modal / Custom keybindings
* Guiding principles of this document

- The keystrokes should **avoid using modifier keys** as much as possible.
- The keystrokes should be **mnemonics** in nature.
- No need to follow Vim / Emacs way of remembering things. Follow what
  is easy for you to remember.
  
* Custom functions

** Buffer editing and inserting characters

#+begin_src emacs-lisp
  (defun insert-4-space ()
    (interactive)
    (insert "    "))
#+end_src

** Search and replace

#+begin_src emacs-lisp

  ;; Replace word under cursor
  (defun replace-cur-word (replace-str)
    (interactive "sDo query-replace current word with: ")
    (forward-word)
    (let ((end (point)))
      (backward-word)
      (kill-ring-save (point) end)
      (query-replace (current-kill 0) replace-str) ))

  ;; query-replace current symbol
  (defun replace-symbol (replace-str)
    (interactive "sDo query-replace current word with: ")
    (sp-forward-symbol)
    (let ((end (point)))
      (sp-backward-symbol)
      (kill-ring-save (point) end)
      (query-replace (current-kill 0) replace-str) ))

  ;; Find markded region using swiper
  (defun swiper-region ()
    "Use current region if active for swiper search"
    (interactive)
    (if (use-region-p)
	(swiper (format "%s" (buffer-substring (region-beginning) (region-end))))
      (swiper)))
    #+end_src

* Packages

** Ryo modal

#+begin_src emacs-lisp
  (use-package ryo-modal
    :commands ryo-modal-mode
    )
  (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist)
  (add-hook 'text-mode-hook 'ryo-modal-mode)
  (add-hook 'prog-mode-hook 'ryo-modal-mode)
#+end_src

** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** Key chord

#+begin_src emacs-lisp
  (use-package key-chord)
  (key-chord-mode 1)
#+end_src
* Entering / Exiting Ryo modal keys

#+begin_src emacs-lisp
  (ryo-modal-keys ("i" ryo-modal-mode))
  (global-set-key (kbd "M-i") 'ryo-modal-mode)
  ;;(key-chord-define-global "ee" 'ryo-modal-mode)

#+end_src

* Repeat

#+begin_src emacs-lisp
  (ryo-modal-keys("8" repeat))
#+end_src

* Moving around
** In buffer

#+begin_src emacs-lisp

  (ryo-modal-keys

   ;; Character related movements
   ("f" forward-char)
   ("b" backward-char)
   ("p" previous-line)
   ("n" next-line)

   ;; Line / Paragraph related movements
   ("F" forward-paragraph)
   ("B" backward-paragraph)
   ("P" scroll-down-command)
   ("N" scroll-up-command)

   ;; Beginning / ending of buffer and lines
   ("g b" beginning-of-buffer)
   ("g e" end-of-buffer)
   ("s" beginning-of-line)
   ("e" end-of-line)

   ;; Word movements
   ("w" forward-word)
   ("W" backward-word)
   )

#+end_src
* Editing

** In buffer

*** Kill

#+begin_src emacs-lisp
  (ryo-modal-keys
   ("k k" kill-line :name "default")
   )
  (let ((text-objects
	 '(
	   ("w" er/mark-word :name "Kill word")
	   ("d" er/mark-defun :name "Kill Defun")
	   ("s" er/mark-symbol :name "kill symbol")
	   )))
    (eval `(ryo-modal-keys
	    ("k" ,text-objects :then '(kill-region)))))
#+end_src

*** Copy

#+begin_src emacs-lisp
  (ryo-modal-keys ("c c" kill-ring-save))
#+end_src

*** Paste

#+begin_src emacs-lisp
  (ryo-modal-keys ("y" yank))
#+end_src

*** Undo
#+begin_src emacs-lisp
  (ryo-modal-keys
   ("u" undo)
   ("U" undo-redo)
   )
#+end_src
* Marking

#+begin_src emacs-lisp
  ;; Start mark
  (ryo-modal-key
   "m" '(
	 ("m" set-mark-command :name "set-mark")
	 ("c" keyboard-quit :name "mark clear")
	 ("w" er/mark-word :name "mark word")
	 ("s" er/mark-symbol :name "mark symbol")
	 ))

#+end_src

* File operations

- Opening
- Saving
- Searching

#+begin_src emacs-lisp

  ;; Saving
  (ryo-modal-keys
   ("SPC s " save-buffer)
   ("SPC S" save-some-buffers)
   )
#+end_src

* Major mode bindings

** Accesing other major modes

#+begin_src emacs-lisp
  (ryo-modal-keys
	     ("SPC m g" magit-status)
	     ("SPC m t" treemacs)
	     )
#+end_src

** Accessing M-x

#+begin_src emacs-lisp
  (ryo-modal-keys ("SPC x" "M-x"))
#+end_src

