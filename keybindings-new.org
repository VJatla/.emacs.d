* Custom functions
** Buffer editing and inserting characters
#+begin_src emacs-lisp
  (defun insert-4-space ()
    (interactive)
    (insert "    "))
#+end_src
** Search and replace
#+begin_src emacs-lisp

  ;; Replace word under cursor
  (defun replace-cur-word (replace-str)
    (interactive "sDo query-replace current word with: ")
    (forward-word)
    (let ((end (point)))
      (backward-word)
      (kill-ring-save (point) end)
      (query-replace (current-kill 0) replace-str) ))

  ;; query-replace current symbol
  (defun replace-symbol (replace-str)
    (interactive "sDo query-replace current word with: ")
    (sp-forward-symbol)
    (let ((end (point)))
      (sp-backward-symbol)
      (kill-ring-save (point) end)
      (query-replace (current-kill 0) replace-str) ))

  ;; Find markded region using swiper
  (defun swiper-region ()
    "Use current region if active for swiper search"
    (interactive)
    (if (use-region-p)
        (swiper (format "%s" (buffer-substring (region-beginning) (region-end))))
      (swiper)))
#+end_src
* Keybinding package configuration
** Ryo modal
#+begin_src emacs-lisp
  (use-package ryo-modal
  :commands ryo-modal-mode
  )
(push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist)
(add-hook 'text-mode-hook 'ryo-modal-mode)
(add-hook 'prog-mode-hook 'ryo-modal-mode)
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
  :config
  (which-key-mode))
#+end_src
* Ryo keybindings
** Enter and exit ryo modes
#+begin_src emacs-lisp
  (global-set-key (kbd "C-8") 'ryo-modal-mode)
  (ryo-modal-keys
 ("8" ryo-modal-mode))
#+end_src

** Moving cursor around
#+begin_src emacs-lisp
  (ryo-modal-keys
   ("e" previous-line)
   ("d" next-line)
   ("s" backward-char)
   ("f" forward-char)
   ("w" backward-word)
   ("r" forward-word)

   ("a" beginning-of-line)
   ("g" end-of-line)

   ("F" forward-paragraph)
   ("S" backward-paragraph)


   ("E" beginning-of-buffer)
   ("D" end-of-buffer)


   ("#" goto-line)
   )
#+end_src

** Buffer selection
#+begin_src emacs-lisp
  (ryo-modal-key "m m" 'beginning-of-line :then '(set-mark-command end-of-line)  :name "mark-whole-line")
  (ryo-modal-key "m (" 'er/mark-inside-pairs  :name "mark-inside-pairs")
  (ryo-modal-key "m q" 'er/mark-inside-quotes  :name "mark-inside-quote")
  (ryo-modal-key "m F" 'set-mark-command :then '(forward-paragraph) :name "mark-paragraph")
  (ryo-modal-key "m S" 'set-mark-command :then '(backward-paragraph) :name "mark-paragraph")
  (ryo-modal-key "m B" 'beginning-of-buffer :then '(set-mark-command end-of-buffer) :name "mark-whole-buffer")
  (ryo-modal-key "m s" 'set-mark-command :then '(backward-char) :name "mark-char-backward")
  (ryo-modal-key "m d" 'set-mark-command :then '(next-line) :name "mark-char-backward")
  (ryo-modal-key "m e" 'set-mark-command :then '(previous-line) :name "mark-char-backward")
  (ryo-modal-key "m f" 'set-mark-command :then '(forward-char) :name "mark-char-forward")
  (ryo-modal-key "m r" 'set-mark-command :then '(forward-word) :name "mark-word")
  (ryo-modal-key "m w" 'set-mark-command :then '(backward-word) :name "mark-word-backward")
  (ryo-modal-key "m D" 'set-mark-command :then '(end-of-buffer) :name "mark-till-buffer-end")
  (ryo-modal-key "m E" 'set-mark-command :then '(beginning-of-buffer)  :name "mark-till-buffer-end")
  (ryo-modal-key "m a" 'set-mark-command :then '(beginning-of-line) :name "mark-line")
  (ryo-modal-key "m g" 'set-mark-command :then '(end-of-line) :name "mark-line")
  (ryo-modal-key "m s" 'er/mark-symbol :name "mark-symbol")
  #+end_src
** Copy / Paste
#+begin_src emacs-lisp
  (ryo-modal-keys
   ("x" kill-region)
   ("y" kill-ring-save))
  (ryo-modal-key "v" 'yank :then '(save-buffer) :name "paste-and-save")
#+end_src
** Accessing important major modes
#+begin_src emacs-lisp
  (ryo-modal-key
   "SPC SPC " '(("t" treemacs)
		("g" magit-status)
		("|" display-fill-column-indicator-mode)))
  #+end_src
* Inside major modes
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :bind(:map dashboard-mode-map
	       ("SPC SPC t" . treemacs)
	       ("SPC SPC a" . org-agenda)
	       ("e" . dashboard-previous-line)
	       ("d" . dashboard-next-line)))
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
  :bind(:map treemacs-mode-map
             ("SPC SPC t" . treemacs)
             ("SPC SPC a" . org-agenda)
             ("e" . treemacs-previous-line)
             ("E" . beginning-of-buffer)
             ("d" . treemacs-next-line)
             ("D" . end-of-buffer)))
#+end_src
